// Answer Keys Data - All questions from 8 exams
const answerKeysData = {
    python: {
        title: "üêç Python Basics",
        icon: "üêç",
        questions: [
            {
                id: 1,
                question: "`names = ['A','B','C']; names[0] = 'Z'; print(names)`",
                answer: "D - ['Z','B','C']",
                explanation: "List l√† mutable (c√≥ th·ªÉ thay ƒë·ªïi). `names[0] = 'Z'` thay ƒë·ªïi ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n t·ª´ 'A' th√†nh 'Z'. K·∫øt qu·∫£: `['Z','B','C']`",
                difficulty: "easy"
            },
            {
                id: 2,
                question: "`my_list = [1,2,3]; my_list[0]`",
                answer: "B - 1",
                explanation: "Indexing b·∫Øt ƒë·∫ßu t·ª´ 0, `my_list[0]` tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n.",
                difficulty: "easy"
            },
            {
                id: 3,
                question: "`my_list = [1,2,3]; my_list[1:3]`",
                answer: "B - [2,3]",
                explanation: "Slicing `[1:3]` l·∫•y t·ª´ index 1 ƒë·∫øn 2 (kh√¥ng bao g·ªìm 3).",
                difficulty: "easy"
            },
            {
                id: 4,
                question: "`'a b c'.split()`",
                answer: "B - ['a','b','c']",
                explanation: "Ph∆∞∆°ng th·ª©c `.split()` chia chu·ªói theo kho·∫£ng tr·∫Øng v√† tr·∫£ v·ªÅ list c√°c t·ª´.",
                difficulty: "easy"
            },
            {
                id: 5,
                question: "`'abc'.replace('a','b')`",
                answer: "D - 'bbc'",
                explanation: "`.replace('a','b')` thay th·∫ø t·∫•t c·∫£ 'a' b·∫±ng 'b'.",
                difficulty: "easy"
            },
            {
                id: 6,
                question: "`' hello '.strip()`",
                answer: "A - 'hello'",
                explanation: "`.strip()` lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu v√† cu·ªëi chu·ªói.",
                difficulty: "easy"
            },
            {
                id: 7,
                question: "`'-'.join(['a','b'])`",
                answer: "A - 'a-b'",
                explanation: "`.join()` n·ªëi c√°c ph·∫ßn t·ª≠ c·ªßa list b·∫±ng d·∫•u '-'.",
                difficulty: "easy"
            },
            {
                id: 8,
                question: "`x = (1,2,3); x[0]`",
                answer: "A - 1",
                explanation: "Tuple l√† immutable sequence, indexing b·∫Øt ƒë·∫ßu t·ª´ 0.",
                difficulty: "easy"
            },
            {
                id: 9,
                question: "`house = {'price':10}; house['price']=15; house['price']`",
                answer: "C - 15",
                explanation: "Dictionary c√≥ th·ªÉ thay ƒë·ªïi gi√° tr·ªã, `house['price']=15` g√°n gi√° tr·ªã m·ªõi.",
                difficulty: "easy"
            },
            {
                id: 10,
                question: "`{1,2,3} == {3,2,1}`",
                answer: "B - TRUE",
                explanation: "Set kh√¥ng quan t√¢m th·ª© t·ª±, `{1,2,3}` v√† `{3,2,1}` l√† b·∫±ng nhau.",
                difficulty: "easy"
            },
            {
                id: 11,
                question: "`add_one = lambda x:x+1; add_one(5)`",
                answer: "B - 6",
                explanation: "Lambda function `lambda x:x+1` v·ªõi `x=5` tr·∫£ v·ªÅ `5+1=6`.",
                difficulty: "medium"
            },
            {
                id: 12,
                question: "C√∫ ph√°p n√†o d√πng ƒë·ªÉ khai b√°o m·ªôt h√†m trong Python?",
                answer: "B - def myFunc():",
                explanation: "C√∫ ph√°p chu·∫©n ƒë·ªÉ khai b√°o h√†m trong Python l√† `def`.",
                difficulty: "easy"
            },
            {
                id: 13,
                question: "Ph√©p to√°n 7 // 2 trong Python cho k·∫øt qu·∫£ l√†:",
                answer: "B - 3",
                explanation: "`//` l√† to√°n t·ª≠ chia l·∫•y ph·∫ßn nguy√™n. `7 // 2 = 3` (7 chia 2 ƒë∆∞·ª£c 3 d∆∞ 1).",
                difficulty: "easy"
            },
            {
                id: 14,
                question: "Ph√©p to√°n 7 % 2 trong Python cho k·∫øt qu·∫£ l√†:",
                answer: "C - 1",
                explanation: "`%` l√† to√°n t·ª≠ modulo (chia l·∫•y d∆∞), `7 % 2 = 1`.",
                difficulty: "easy"
            },
            {
                id: 15,
                question: "`print(5 / 2)`",
                answer: "A - 2.5",
                explanation: "`/` l√† ph√©p chia th·ª±c, `5 / 2 = 2.5`.",
                difficulty: "easy"
            },
            {
                id: 16,
                question: "`print(5 // 2)`",
                answer: "C - 2",
                explanation: "`//` l√† ph√©p chia l·∫•y ph·∫ßn nguy√™n, `5 // 2 = 2`.",
                difficulty: "easy"
            },
            {
                id: 17,
                question: "`print(2 ** 3)`",
                answer: "B - 8",
                explanation: "`**` l√† to√°n t·ª≠ l≈©y th·ª´a, `2 ** 3 = 8`.",
                difficulty: "easy"
            },
            {
                id: 18,
                question: "`[i for i in range(5) if i%2==0]`",
                answer: "A - [0,2,4]",
                explanation: "List comprehension t·∫°o list c√°c s·ªë ch·∫µn t·ª´ 0 ƒë·∫øn 4: `[0,2,4]`.",
                difficulty: "medium"
            },
            {
                id: 19,
                question: "D·∫•u th·ª•t l·ªÅ (indentation) trong Python c√≥ vai tr√≤ g√¨?",
                answer: "C - X√°c ƒë·ªãnh c·∫•u tr√∫c kh·ªëi l·ªánh",
                explanation: "Python s·ª≠ d·ª•ng indentation ƒë·ªÉ ƒë·ªãnh nghƒ©a kh·ªëi l·ªánh thay v√¨ d√πng `{}`.",
                difficulty: "easy"
            },
            {
                id: 20,
                question: "Ai l√† ng∆∞·ªùi ph√°t tri·ªÉn ng√¥n ng·ªØ Python?",
                answer: "B - Guido van Rossum",
                explanation: "Guido van Rossum l√† ng∆∞·ªùi t·∫°o ra Python v√†o nƒÉm 1991.",
                difficulty: "easy"
            },
            {
                id: 21,
                question: "Python l√† ng√¥n ng·ªØ l·∫≠p tr√¨nh thu·ªôc lo·∫°i n√†o?",
                answer: "B - Th√¥ng d·ªãch, ki·ªÉu ƒë·ªông",
                explanation: "Python l√† ng√¥n ng·ªØ th√¥ng d·ªãch (interpreted) v√† c√≥ ki·ªÉu ƒë·ªông (dynamic typing).",
                difficulty: "easy"
            }
        ]
    },
    numpy: {
        title: "üî¢ NumPy Operations",
        icon: "üî¢",
        questions: [
            {
                id: 22,
                question: "H√†m n√†o trong NumPy d√πng ƒë·ªÉ t·∫°o m·∫£ng ch·ª©a to√†n s·ªë 0?",
                answer: "D - np.zeros()",
                explanation: "`np.zeros()` t·∫°o m·∫£ng v·ªõi t·∫•t c·∫£ ph·∫ßn t·ª≠ l√† 0. `np.ones()` t·∫°o m·∫£ng v·ªõi ph·∫ßn t·ª≠ l√† 1.",
                difficulty: "easy"
            },
            {
                id: 23,
                question: "`np.zeros((2, 3))` t·∫°o ra m·∫£ng c√≥ k√≠ch th∆∞·ªõc:",
                answer: "A - 2 d√≤ng, 3 c·ªôt",
                explanation: "`np.zeros((2, 3))` t·∫°o ma tr·∫≠n 2x3.",
                difficulty: "easy"
            },
            {
                id: 24,
                question: "NumPy l√† vi·∫øt t·∫Øt c·ªßa:",
                answer: "C - Numerical Python",
                explanation: "NumPy = **Num**erical **Py**thon. Th∆∞ vi·ªán t√≠nh to√°n s·ªë h·ªçc cho Python.",
                difficulty: "easy"
            },
            {
                id: 25,
                question: "ƒê·ªëi t∆∞·ª£ng ch√≠nh c·ªßa NumPy ƒë·ªÉ l∆∞u tr·ªØ d·ªØ li·ªáu l√†:",
                answer: "A - ndarray",
                explanation: "ndarray (N-dimensional array) l√† ƒë·ªëi t∆∞·ª£ng ch√≠nh c·ªßa NumPy.",
                difficulty: "easy"
            },
            {
                id: 26,
                question: "`np.arange(5) * 2`",
                answer: "A - [0 2 4 6 8]",
                explanation: "`np.arange(5)` t·∫°o `[0,1,2,3,4]`, nh√¢n v·ªõi 2 ƒë∆∞·ª£c `[0,2,4,6,8]`.",
                difficulty: "medium"
            },
            {
                id: 27,
                question: "`arr = np.arange(10); arr[2:5]` s·∫Ω tr·∫£ v·ªÅ:",
                answer: "D - [2, 3, 4]",
                explanation: "`np.arange(10)` t·∫°o `[0,1,2,3,4,5,6,7,8,9]`, `arr[2:5]` l·∫•y t·ª´ index 2 ƒë·∫øn 4.",
                difficulty: "medium"
            },
            {
                id: 28,
                question: "`np.arange(6).reshape(2,3).shape`",
                answer: "D - (2,3)",
                explanation: "`np.arange(6)` t·∫°o `[0,1,2,3,4,5]`, `.reshape(2,3)` chuy·ªÉn th√†nh ma tr·∫≠n 2x3.",
                difficulty: "medium"
            },
            {
                id: 29,
                question: "`np.arange(8).reshape(2,4).T.shape`",
                answer: "B - (4,2)",
                explanation: "Ma tr·∫≠n 2x4 sau khi transpose (`.T`) th√†nh ma tr·∫≠n 4x2.",
                difficulty: "medium"
            },
            {
                id: 30,
                question: "`arr = np.array([1, 2, 3]); arr.dtype` s·∫Ω tr·∫£ v·ªÅ:",
                answer: "B - int32 ho·∫∑c int64",
                explanation: "`.dtype` tr·∫£ v·ªÅ ki·ªÉu d·ªØ li·ªáu c·ªßa m·∫£ng, th∆∞·ªùng l√† int32 ho·∫∑c int64.",
                difficulty: "medium"
            },
            {
                id: 31,
                question: "`np.array([1.5, -0.1, 3]).dtype`",
                answer: "A - float64",
                explanation: "M·∫£ng c√≥ s·ªë th·∫≠p ph√¢n s·∫Ω c√≥ ki·ªÉu float64.",
                difficulty: "easy"
            },
            {
                id: 32,
                question: "`np.array([3.7, -1.2]).astype(int)`",
                answer: "A - [3, -1]",
                explanation: "`.astype(int)` chuy·ªÉn ƒë·ªïi sang integer, l√†m tr√≤n xu·ªëng. `3.7 ‚Üí 3`, `-1.2 ‚Üí -1`.",
                difficulty: "medium"
            },
            {
                id: 33,
                question: "`np.sqrt(np.array([1,4,9]))`",
                answer: "C - [1.0,2.0,3.0]",
                explanation: "`np.sqrt()` t√≠nh cƒÉn b·∫≠c hai c·ªßa t·ª´ng ph·∫ßn t·ª≠.",
                difficulty: "easy"
            },
            {
                id: 34,
                question: "`np.where([True,False,True],[1,2,3],[9,9,9])`",
                answer: "A - [1,9,3]",
                explanation: "`np.where()` ch·ªçn t·ª´ m·∫£ng ƒë·∫ßu ti√™n n·∫øu True, t·ª´ m·∫£ng th·ª© hai n·∫øu False.",
                difficulty: "medium"
            },
            {
                id: 35,
                question: "`arr=np.array([3,-1,2]); (arr>0).sum()`",
                answer: "B - 2",
                explanation: "`arr>0` t·∫°o `[True,False,True]`, `.sum()` ƒë·∫øm s·ªë True (2).",
                difficulty: "medium"
            },
            {
                id: 36,
                question: "`np.array([3,-1,2]).mean()`",
                answer: "B - 1.333...",
                explanation: "T√≠nh trung b√¨nh: `(3+(-1)+2)/3 = 4/3 ‚âà 1.333`.",
                difficulty: "easy"
            },
            {
                id: 37,
                question: "`np.array([1,2,3]).cumsum()`",
                answer: "B - [1,3,6]",
                explanation: "`.cumsum()` t√≠nh t·ªïng t√≠ch l≈©y: `[1, 1+2, 1+2+3] = [1,3,6]`.",
                difficulty: "medium"
            },
            {
                id: 38,
                question: "`np.unique([3,3,2,1,2])`",
                answer: "B - [1,2,3]",
                explanation: "`np.unique()` tr·∫£ v·ªÅ c√°c gi√° tr·ªã duy nh·∫•t ƒë√£ s·∫Øp x·∫øp.",
                difficulty: "easy"
            },
            {
                id: 39,
                question: "`np.isin([1,2,3],[2,4])`",
                answer: "A - [False,True,False]",
                explanation: "`np.isin()` ki·ªÉm tra t·ª´ng ph·∫ßn t·ª≠ c·ªßa m·∫£ng ƒë·∫ßu c√≥ trong m·∫£ng th·ª© hai kh√¥ng.",
                difficulty: "medium"
            },
            {
                id: 40,
                question: "`np.dot(np.array([1,2]), np.array([3,4]))`",
                answer: "B - 11",
                explanation: "T√≠ch v√¥ h∆∞·ªõng: `1*3 + 2*4 = 3 + 8 = 11`.",
                difficulty: "medium"
            },
            {
                id: 41,
                question: "Quy ∆∞·ªõc import NumPy l√†:",
                answer: "C - import numpy as np",
                explanation: "Quy ∆∞·ªõc chu·∫©n ƒë·ªÉ import NumPy v·ªõi alias `np`.",
                difficulty: "easy"
            },
            {
                id: 42,
                question: "T√≠nh nƒÉng ch√≠nh c·ªßa NumPy so v·ªõi list Python th√¥ng th∆∞·ªùng l√†:",
                answer: "D - T·ªëc ƒë·ªô t√≠nh to√°n nhanh v√† chi·∫øm √≠t b·ªô nh·ªõ h∆°n",
                explanation: "NumPy ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a cho t√≠nh to√°n s·ªë h·ªçc nhanh v√† hi·ªáu qu·∫£ b·ªô nh·ªõ.",
                difficulty: "easy"
            }
        ]
    },
    pandas: {
        title: "üêº Pandas Operations",
        icon: "üêº",
        questions: [
            {
                id: 43,
                question: "Hai c·∫•u tr√∫c d·ªØ li·ªáu c·ªët l√µi c·ªßa pandas l√†:",
                answer: "C - Series v√† DataFrame",
                explanation: "Series (1D) v√† DataFrame (2D) l√† hai c·∫•u tr√∫c c∆° b·∫£n nh·∫•t c·ªßa pandas.",
                difficulty: "easy"
            },
            {
                id: 44,
                question: "Series trong pandas l√†:",
                answer: "C - M·∫£ng m·ªôt chi·ªÅu c√≥ nh√£n",
                explanation: "Series l√† c·∫•u tr√∫c d·ªØ li·ªáu 1 chi·ªÅu v·ªõi index (nh√£n) cho m·ªói ph·∫ßn t·ª≠.",
                difficulty: "easy"
            },
            {
                id: 45,
                question: "Pandas ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n th∆∞ vi·ªán n√†o?",
                answer: "A - NumPy",
                explanation: "Pandas ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n NumPy, s·ª≠ d·ª•ng NumPy arrays l√†m backend.",
                difficulty: "easy"
            },
            {
                id: 46,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df['A'].mean()`",
                answer: "A - 2",
                explanation: "T√≠nh trung b√¨nh c·ªßa c·ªôt A: `(1+2+3)/3 = 2`.",
                difficulty: "easy"
            },
            {
                id: 47,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df['A'].sum()`",
                answer: "A - 6",
                explanation: "T·ªïng c·ªßa c·ªôt A: `1+2+3 = 6`.",
                difficulty: "easy"
            },
            {
                id: 48,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df['A'].cumsum().tolist()`",
                answer: "A - [1,3,6]",
                explanation: "T·ªïng t√≠ch l≈©y: `[1, 1+2, 1+2+3] = [1,3,6]`.",
                difficulty: "medium"
            },
            {
                id: 49,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df['A'].apply(lambda x:x**2).tolist()`",
                answer: "A - [1,4,9]",
                explanation: "√Åp d·ª•ng h√†m lambda `x**2` cho t·ª´ng ph·∫ßn t·ª≠: `[1¬≤, 2¬≤, 3¬≤] = [1,4,9]`.",
                difficulty: "medium"
            },
            {
                id: 50,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.sort_values('A',ascending=False)['A'].tolist()`",
                answer: "B - [3,2,1]",
                explanation: "S·∫Øp x·∫øp gi·∫£m d·∫ßn: `[3,2,1]`.",
                difficulty: "medium"
            },
            {
                id: 51,
                question: "`df=pd.DataFrame({'A':[1,1,2]}); df['A'].unique().tolist()`",
                answer: "C - [1,2]",
                explanation: "`.unique()` tr·∫£ v·ªÅ c√°c gi√° tr·ªã duy nh·∫•t: `[1,2]`.",
                difficulty: "easy"
            },
            {
                id: 52,
                question: "`df=pd.DataFrame({'A':[1,1,2]}); df['A'].nunique()`",
                answer: "A - 2",
                explanation: "`.nunique()` ƒë·∫øm s·ªë gi√° tr·ªã duy nh·∫•t: 2.",
                difficulty: "easy"
            },
            {
                id: 53,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.query('A>1').shape[0]`",
                answer: "A - 2",
                explanation: "`.query('A>1')` l·ªçc c√°c d√≤ng c√≥ A > 1, c√≥ 2 d√≤ng.",
                difficulty: "medium"
            },
            {
                id: 54,
                question: "`df=pd.DataFrame({'A':[1,2,3],'B':[3,4,5]}); df[['A','B']].sum().tolist()`",
                answer: "A - [6,12]",
                explanation: "T·ªïng t·ª´ng c·ªôt: A = 1+2+3=6, B = 3+4+5=12.",
                difficulty: "easy"
            },
            {
                id: 55,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.shape`",
                answer: "A - (3,1)",
                explanation: "DataFrame c√≥ 3 d√≤ng, 1 c·ªôt.",
                difficulty: "easy"
            },
            {
                id: 56,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.info().__class__.__name__`",
                answer: "C - NoneType",
                explanation: "`df.info()` kh√¥ng tr·∫£ v·ªÅ gi√° tr·ªã (return None).",
                difficulty: "medium"
            },
            {
                id: 57,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); 'A' in df.columns`",
                answer: "A - TRUE",
                explanation: "Ki·ªÉm tra c·ªôt 'A' c√≥ trong DataFrame kh√¥ng.",
                difficulty: "easy"
            },
            {
                id: 58,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.rename(columns={'A':'X'}).columns[0]`",
                answer: "C - 'X'",
                explanation: "`.rename(columns={'A':'X'})` ƒë·ªïi t√™n c·ªôt 'A' th√†nh 'X'.",
                difficulty: "medium"
            },
            {
                id: 59,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.set_index('A').index.name`",
                answer: "C - 'A'",
                explanation: "`df.set_index('A')` ƒë·∫∑t c·ªôt 'A' l√†m index, `.index.name` tr·∫£ v·ªÅ 'A'.",
                difficulty: "medium"
            },
            {
                id: 60,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); df.reset_index().index[0]`",
                answer: "A - 0",
                explanation: "`df.reset_index()` t·∫°o index m·ªõi b·∫Øt ƒë·∫ßu t·ª´ 0.",
                difficulty: "easy"
            },
            {
                id: 61,
                question: "ƒê·ªÉ ch·ªçn c·ªôt 'Name' t·ª´ DataFrame df, ta d√πng:",
                answer: "A - df.Name ho·∫∑c df['Name']",
                explanation: "C√≥ th·ªÉ d√πng c·∫£ hai c√°ch ƒë·ªÉ ch·ªçn c·ªôt.",
                difficulty: "easy"
            },
            {
                id: 62,
                question: "`df.loc[0]` d√πng ƒë·ªÉ:",
                answer: "B - Ch·ªçn d√≤ng c√≥ index 0",
                explanation: "`df.loc[0]` ch·ªçn d√≤ng c√≥ index 0.",
                difficulty: "easy"
            },
            {
                id: 63,
                question: "`df.head()` m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã bao nhi√™u d√≤ng ƒë·∫ßu ti√™n?",
                answer: "B - 5 d√≤ng",
                explanation: "`df.head()` m·∫∑c ƒë·ªãnh hi·ªÉn th·ªã 5 d√≤ng ƒë·∫ßu.",
                difficulty: "easy"
            },
            {
                id: 64,
                question: "`s = pd.Series([1, 2, 3, 4]); s.mean()` tr·∫£ v·ªÅ:",
                answer: "B - 2.5",
                explanation: "Trung b√¨nh: `(1+2+3+4)/4 = 2.5`.",
                difficulty: "easy"
            },
            {
                id: 65,
                question: "`df.info()` hi·ªÉn th·ªã th√¥ng tin g√¨ v·ªÅ DataFrame?",
                answer: "C - Ki·ªÉu d·ªØ li·ªáu v√† th√¥ng tin b·ªô nh·ªõ",
                explanation: "`df.info()` hi·ªÉn th·ªã ki·ªÉu d·ªØ li·ªáu, s·ªë d√≤ng/c·ªôt, v√† th√¥ng tin b·ªô nh·ªõ.",
                difficulty: "easy"
            },
            {
                id: 66,
                question: "`df=pd.DataFrame({'A':[1,2,3]}); type(df.to_dict())`",
                answer: "A - dict",
                explanation: "`df.to_dict()` chuy·ªÉn DataFrame th√†nh dictionary.",
                difficulty: "easy"
            },
            {
                id: 67,
                question: "`df = pd.DataFrame({'A':[1,2], 'B':[3,4]}); df.to_csv('out.csv', index=False)` s·∫Ω t·∫°o file CSV v·ªõi?",
                answer: "A - Kh√¥ng c√≥ c·ªôt index",
                explanation: "`index=False` nghƒ©a l√† kh√¥ng xu·∫•t index.",
                difficulty: "easy"
            }
        ]
    },
    fileio: {
        title: "üìÅ File I/O Operations",
        icon: "üìÅ",
        questions: [
            {
                id: 68,
                question: "`pd.read_csv('sample_data.csv').shape` tr·∫£ v·ªÅ g√¨?",
                answer: "C - (s·ªë d√≤ng, s·ªë c·ªôt)",
                explanation: "Thu·ªôc t√≠nh `.shape` tr·∫£ v·ªÅ tuple `(rows, columns)`.",
                difficulty: "easy"
            },
            {
                id: 69,
                question: "`pd.read_csv('sample_data.csv').head(3).shape[0]` tr·∫£ v·ªÅ g√¨?",
                answer: "B - 3",
                explanation: "`.head(3)` l·∫•y 3 d√≤ng ƒë·∫ßu, `.shape[0]` tr·∫£ v·ªÅ s·ªë d√≤ng.",
                difficulty: "easy"
            },
            {
                id: 70,
                question: "H√†m `pd.read_csv()` trong pandas d√πng ƒë·ªÉ:",
                answer: "B - ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV",
                explanation: "`pd.read_csv()` d√πng ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ file CSV v√†o DataFrame.",
                difficulty: "easy"
            },
            {
                id: 71,
                question: "Tham s·ªë `header=None` trong `pd.read_csv()` c√≥ √Ω nghƒ©a g√¨?",
                answer: "B - D√≤ng ƒë·∫ßu kh√¥ng ph·∫£i l√† t√™n c·ªôt",
                explanation: "`header=None` nghƒ©a l√† kh√¥ng c√≥ header, d√≤ng ƒë·∫ßu l√† d·ªØ li·ªáu.",
                difficulty: "medium"
            },
            {
                id: 72,
                question: "Tham s·ªë `index_col` trong `pd.read_csv()` d√πng ƒë·ªÉ:",
                answer: "B - Ch·ªâ ƒë·ªãnh c·ªôt n√†o l√†m index",
                explanation: "`index_col` ch·ªâ ƒë·ªãnh c·ªôt n√†o s·∫Ω ƒë∆∞·ª£c d√πng l√†m index.",
                difficulty: "easy"
            },
            {
                id: 73,
                question: "Tham s·ªë `skiprows` trong `pd.read_csv()` c√≥ t√°c d·ª•ng g√¨?",
                answer: "B - B·ªè qua c√°c d√≤ng ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh",
                explanation: "`skiprows` b·ªè qua c√°c d√≤ng c·ª• th·ªÉ khi ƒë·ªçc file.",
                difficulty: "easy"
            },
            {
                id: 74,
                question: "ƒê·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ m·ªôt URL s·ª≠ d·ª•ng pandas, ta l√†m th·∫ø n√†o?",
                answer: "B - D√πng pd.read_csv(url) tr·ª±c ti·∫øp",
                explanation: "Pandas c√≥ th·ªÉ ƒë·ªçc tr·ª±c ti·∫øp t·ª´ URL.",
                difficulty: "easy"
            },
            {
                id: 75,
                question: "ƒê·ªçc file 'sample_data.csv' v·ªõi `header=None`. T√™n c·ªßa c·ªôt ƒë·∫ßu ti√™n l√† g√¨? (`df.columns[0]`)",
                answer: "D - 'Unnamed: 0'",
                explanation: "Khi `header=None`, pandas t·ª± ƒë·ªông ƒë·∫∑t t√™n c·ªôt l√† 'Unnamed: 0', 'Unnamed: 1', ...",
                difficulty: "medium"
            },
            {
                id: 76,
                question: "ƒê·ªçc file v·ªõi `index_col=0`, `df.index.name` l√†?",
                answer: "A - T√™n c·ªôt ƒë·∫ßu ti√™n",
                explanation: "Khi `index_col=0`, c·ªôt ƒë·∫ßu ti√™n tr·ªü th√†nh index v√† t√™n c·ªßa n√≥ l√† `df.index.name`.",
                difficulty: "easy"
            },
            {
                id: 77,
                question: "H√†m `pd.read_excel()` d√πng ƒë·ªÉ l√†m g√¨?",
                answer: "A - ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel",
                explanation: "`pd.read_excel()` d√πng ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ file Excel (.xlsx, .xls).",
                difficulty: "easy"
            },
            {
                id: 78,
                question: "JSON l√† vi·∫øt t·∫Øt c·ªßa:",
                answer: "B - JavaScript Object Notation",
                explanation: "JSON = JavaScript Object Notation, ƒë·ªãnh d·∫°ng trao ƒë·ªïi d·ªØ li·ªáu ph·ªï bi·∫øn.",
                difficulty: "easy"
            },
            {
                id: 79,
                question: "H√†m `pd.read_json()` d√πng ƒë·ªÉ:",
                answer: "B - ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON",
                explanation: "`pd.read_json()` d√πng ƒë·ªÉ ƒë·ªçc d·ªØ li·ªáu t·ª´ file JSON.",
                difficulty: "easy"
            },
            {
                id: 80,
                question: "H√†m `pd.read_html()` c√≥ t√°c d·ª•ng g√¨?",
                answer: "B - ƒê·ªçc b·∫£ng t·ª´ trang web HTML",
                explanation: "`pd.read_html()` d√πng ƒë·ªÉ ƒë·ªçc c√°c b·∫£ng t·ª´ trang web HTML.",
                difficulty: "easy"
            },
            {
                id: 81,
                question: "Trong Python, ƒë·ªÉ k·∫øt n·ªëi v·ªõi c∆° s·ªü d·ªØ li·ªáu SQLite, ta d√πng th∆∞ vi·ªán:",
                answer: "B - sqlite3",
                explanation: "Th∆∞ vi·ªán `sqlite3` ƒë∆∞·ª£c t√≠ch h·ª£p s·∫µn trong Python ƒë·ªÉ l√†m vi·ªác v·ªõi SQLite.",
                difficulty: "medium"
            }
        ]
    },
    dataprocessing: {
        title: "üîß Data Processing",
        icon: "üîß",
        questions: [
            {
                id: 82,
                question: "ƒê·ªÉ x·ª≠ l√Ω d·ªØ li·ªáu thi·∫øu trong pandas, ta c√≥ th·ªÉ d√πng:",
                answer: "D - dropna() v√† fillna()",
                explanation: "`dropna()` x√≥a d·ªØ li·ªáu thi·∫øu, `fillna()` thay th·∫ø d·ªØ li·ªáu thi·∫øu.",
                difficulty: "easy"
            },
            {
                id: 83,
                question: "`df=pd.DataFrame({'A':[1,np.nan,3]}); df['A'].isnull().sum()`",
                answer: "A - 1",
                explanation: "`.isnull()` t√¨m gi√° tr·ªã thi·∫øu, `.sum()` ƒë·∫øm s·ªë l∆∞·ª£ng.",
                difficulty: "easy"
            },
            {
                id: 84,
                question: "`pd.DataFrame({'A':[1,np.nan,3]})` d√πng `df.dropna().shape[0]` s·∫Ω tr·∫£ v·ªÅ?",
                answer: "C - 1",
                explanation: "`dropna()` x√≥a d√≤ng c√≥ NaN, ch·ªâ c√≤n l·∫°i 1 d√≤ng.",
                difficulty: "easy"
            },
            {
                id: 85,
                question: "`pd.DataFrame({'col':['abc','AbC','xyz']}).col.str.contains('abc',case=False).sum()`",
                answer: "A - 2",
                explanation: "`str.contains('abc',case=False)` t√¨m chu·ªói ch·ª©a 'abc' (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng), c√≥ 2 k·∫øt qu·∫£.",
                difficulty: "medium"
            },
            {
                id: 86,
                question: "`pd.Series([1,2,3,3,2]).value_counts().sort_index().index[0]`",
                answer: "A - 1",
                explanation: "`.value_counts()` ƒë·∫øm t·∫ßn su·∫•t, `.sort_index()` s·∫Øp x·∫øp theo index, `.index[0]` l·∫•y gi√° tr·ªã ƒë·∫ßu ti√™n.",
                difficulty: "medium"
            }
        ]
    },
    datascience: {
        title: "üìä Data Science Concepts",
        icon: "üìä",
        questions: [
            {
                id: 87,
                question: "Khoa h·ªçc d·ªØ li·ªáu l√† s·ª± k·∫øt h·ª£p c·ªßa ba tr·ª• c·ªôt ch√≠nh n√†o?",
                answer: "B - To√°n h·ªçc & Th·ªëng k√™, Khoa h·ªçc m√°y t√≠nh, Ki·∫øn th·ª©c chuy√™n ng√†nh",
                explanation: "Ba tr·ª• c·ªôt c·ªßa Data Science: To√°n h·ªçc & Th·ªëng k√™, Khoa h·ªçc m√°y t√≠nh, v√† Ki·∫øn th·ª©c chuy√™n ng√†nh.",
                difficulty: "medium"
            },
            {
                id: 88,
                question: "B∆∞·ªõc ƒë·∫ßu ti√™n trong chu tr√¨nh khai th√°c d·ªØ li·ªáu l√† g√¨?",
                answer: "C - X√°c ƒë·ªãnh b√†i to√°n",
                explanation: "Quy tr√¨nh khoa h·ªçc d·ªØ li·ªáu b·∫Øt ƒë·∫ßu v·ªõi vi·ªác x√°c ƒë·ªãnh b√†i to√°n c·∫ßn gi·∫£i quy·∫øt.",
                difficulty: "medium"
            },
            {
                id: 89,
                question: "Trong quy tr√¨nh khoa h·ªçc d·ªØ li·ªáu, vi·ªác 'l√†m s·∫°ch d·ªØ li·ªáu' thu·ªôc b∆∞·ªõc n√†o?",
                answer: "B - X·ª≠ l√Ω d·ªØ li·ªáu",
                explanation: "L√†m s·∫°ch d·ªØ li·ªáu thu·ªôc b∆∞·ªõc x·ª≠ l√Ω d·ªØ li·ªáu trong quy tr√¨nh khoa h·ªçc d·ªØ li·ªáu.",
                difficulty: "medium"
            },
            {
                id: 90,
                question: "Data Engineer ch·ªß y·∫øu ƒë·∫£m nh·∫≠n c√¥ng vi·ªác n√†o?",
                answer: "B - Thi·∫øt k·∫ø h·∫° t·∫ßng v√† thu th·∫≠p d·ªØ li·ªáu",
                explanation: "Data Engineer chuy√™n v·ªÅ thi·∫øt k·∫ø h·ªá th·ªëng, pipeline d·ªØ li·ªáu v√† thu th·∫≠p d·ªØ li·ªáu.",
                difficulty: "medium"
            },
            {
                id: 91,
                question: "Matplotlib ƒë∆∞·ª£c s·ª≠ d·ª•ng ch·ªß y·∫øu ƒë·ªÉ:",
                answer: "C - Tr·ª±c quan h√≥a d·ªØ li·ªáu",
                explanation: "Matplotlib l√† th∆∞ vi·ªán ch√≠nh ƒë·ªÉ t·∫°o bi·ªÉu ƒë·ªì v√† tr·ª±c quan h√≥a d·ªØ li·ªáu.",
                difficulty: "easy"
            },
            {
                id: 92,
                question: "Th∆∞ vi·ªán n√†o ƒë∆∞·ª£c x√¢y d·ª±ng d·ª±a tr√™n Matplotlib v√† cung c·∫•p giao di·ªán ƒë·∫πp h∆°n?",
                answer: "B - Seaborn",
                explanation: "Seaborn ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n Matplotlib v√† cung c·∫•p giao di·ªán ƒë·∫πp h∆°n.",
                difficulty: "easy"
            },
            {
                id: 93,
                question: "API l√† vi·∫øt t·∫Øt c·ªßa:",
                answer: "D - Application Programming Interface",
                explanation: "API = Application Programming Interface, giao di·ªán l·∫≠p tr√¨nh ·ª©ng d·ª•ng.",
                difficulty: "easy"
            },
            {
                id: 94,
                question: "Encoding UTF-8 th∆∞·ªùng ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ:",
                answer: "D - M√£ h√≥a k√Ω t·ª± Unicode",
                explanation: "UTF-8 l√† b·ªô m√£ h√≥a Unicode, h·ªó tr·ª£ t·∫•t c·∫£ k√Ω t·ª± Unicode.",
                difficulty: "easy"
            }
        ]
    }
};

// Global variables
let currentTopic = 'all';
let currentPage = 1;
const questionsPerPage = 10;
let filteredQuestions = [];

// Initialize the application
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
});

function initializeApp() {
    setupEventListeners();
    loadQuestions();
    updatePagination();
}

function setupEventListeners() {
    // Tab navigation
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.addEventListener('click', function() {
            const topic = this.getAttribute('data-topic');
            switchTopic(topic);
        });
    });

    // Search functionality
    document.getElementById('searchBox').addEventListener('input', function() {
        const searchTerm = this.value.toLowerCase();
        filterQuestions(searchTerm);
    });

    // Pagination
    document.getElementById('prevBtn').addEventListener('click', function() {
        if (currentPage > 1) {
            currentPage--;
            displayQuestions();
            updatePagination();
        }
    });

    document.getElementById('nextBtn').addEventListener('click', function() {
        const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage);
        if (currentPage < totalPages) {
            currentPage++;
            displayQuestions();
            updatePagination();
        }
    });
}

function switchTopic(topic) {
    currentTopic = topic;
    currentPage = 1;
    
    // Update active tab
    document.querySelectorAll('.tab-btn').forEach(btn => {
        btn.classList.remove('active');
    });
    document.querySelector(`[data-topic="${topic}"]`).classList.add('active');
    
    loadQuestions();
    updatePagination();
}

function loadQuestions() {
    if (currentTopic === 'all') {
        // Load all questions from all topics
        filteredQuestions = [];
        Object.keys(answerKeysData).forEach(topic => {
            filteredQuestions = filteredQuestions.concat(answerKeysData[topic].questions);
        });
    } else {
        // Load questions from specific topic
        filteredQuestions = answerKeysData[currentTopic].questions || [];
    }
    
    displayQuestions();
}

function filterQuestions(searchTerm) {
    if (currentTopic === 'all') {
        filteredQuestions = [];
        Object.keys(answerKeysData).forEach(topic => {
            const topicQuestions = answerKeysData[topic].questions.filter(q => 
                q.question.toLowerCase().includes(searchTerm) ||
                q.answer.toLowerCase().includes(searchTerm) ||
                q.explanation.toLowerCase().includes(searchTerm)
            );
            filteredQuestions = filteredQuestions.concat(topicQuestions);
        });
    } else {
        filteredQuestions = answerKeysData[currentTopic].questions.filter(q => 
            q.question.toLowerCase().includes(searchTerm) ||
            q.answer.toLowerCase().includes(searchTerm) ||
            q.explanation.toLowerCase().includes(searchTerm)
        );
    }
    
    currentPage = 1;
    displayQuestions();
    updatePagination();
}

function displayQuestions() {
    const container = document.getElementById('answerContent');
    const startIndex = (currentPage - 1) * questionsPerPage;
    const endIndex = startIndex + questionsPerPage;
    const questionsToShow = filteredQuestions.slice(startIndex, endIndex);
    
    if (questionsToShow.length === 0) {
        container.innerHTML = '<div class="no-results">Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi n√†o ph√π h·ª£p.</div>';
        return;
    }
    
    let html = '';
    
    if (currentTopic === 'all') {
        // Group questions by topic
        const groupedQuestions = {};
        questionsToShow.forEach(q => {
            const topic = findTopicForQuestion(q.id);
            if (!groupedQuestions[topic]) {
                groupedQuestions[topic] = [];
            }
            groupedQuestions[topic].push(q);
        });
        
        Object.keys(groupedQuestions).forEach(topic => {
            const topicData = answerKeysData[topic];
            html += `
                <div class="topic-section">
                    <div class="topic-header">
                        <div class="topic-icon">${topicData.icon}</div>
                        <div>
                            <h2 class="topic-title">${topicData.title}</h2>
                            <div class="topic-stats">${groupedQuestions[topic].length} c√¢u h·ªèi</div>
                        </div>
                    </div>
            `;
            
            groupedQuestions[topic].forEach(q => {
                html += generateQuestionHTML(q);
            });
            
            html += '</div>';
        });
    } else {
        // Show questions for specific topic
        const topicData = answerKeysData[currentTopic];
        html += `
            <div class="topic-section">
                <div class="topic-header">
                    <div class="topic-icon">${topicData.icon}</div>
                    <div>
                        <h2 class="topic-title">${topicData.title}</h2>
                        <div class="topic-stats">${questionsToShow.length} c√¢u h·ªèi</div>
                    </div>
                </div>
        `;
        
        questionsToShow.forEach(q => {
            html += generateQuestionHTML(q);
        });
        
        html += '</div>';
    }
    
    container.innerHTML = html;
    
    // Highlight code blocks
    if (typeof hljs !== 'undefined') {
        hljs.highlightAll();
    }
}

function generateQuestionHTML(question) {
    const difficultyClass = `difficulty-${question.difficulty}`;
    const difficultyText = question.difficulty === 'easy' ? 'D·ªÖ' : 
                          question.difficulty === 'medium' ? 'Trung b√¨nh' : 'Kh√≥';
    
    return `
        <div class="question-card fade-in">
            <div class="question-number">C√¢u ${question.id}</div>
            <div class="question-text">
                ${question.question}
                <span class="difficulty-badge ${difficultyClass}">${difficultyText}</span>
            </div>
            <div class="answer-section">
                <div class="correct-answer">ƒê√°p √°n: ${question.answer}</div>
                <div class="explanation">
                    <strong>Gi·∫£i th√≠ch:</strong> ${question.explanation}
                </div>
            </div>
        </div>
    `;
}

function findTopicForQuestion(questionId) {
    for (const topic in answerKeysData) {
        if (answerKeysData[topic].questions.some(q => q.id === questionId)) {
            return topic;
        }
    }
    return 'python'; // fallback
}

function updatePagination() {
    const totalPages = Math.ceil(filteredQuestions.length / questionsPerPage);
    const prevBtn = document.getElementById('prevBtn');
    const nextBtn = document.getElementById('nextBtn');
    const pageInfo = document.getElementById('pageInfo');
    
    prevBtn.disabled = currentPage === 1;
    nextBtn.disabled = currentPage === totalPages || totalPages === 0;
    
    pageInfo.textContent = `Trang ${currentPage} / ${totalPages || 1}`;
}